#!/usr/bin/env php
<?php

use League\CommonMark;
use atoum\apiblueprint\Finder;
use atoum\apiblueprint\Parser;

require dirname(__DIR__) . '/vendor/autoload.php';

class HeadingRenderer implements CommonMark\Block\Renderer\BlockRendererInterface
{
    public function render(CommonMark\Block\Element\AbstractBlock $block, CommonMark\ElementRendererInterface $htmlRenderer, $inTightList = false)
    {
        $tag        = 'h' . $block->getLevel();
        $attributes = ['class' => ''];
        $parser     = new Parser();

        $blockContent = $parser->getHeaderContent($block);

        switch ($parser->getHeaderType($blockContent, $headerMatches)) {
            case Parser::HEADER_GROUP:
                $attributes['class'] .= ' heading--type-group';

                break;

            case Parser::HEADER_RESOURCE:
                $attributes['class'] .= ' heading--type-resource';

                break;

            case Parser::HEADER_ACTION:
                $attributes['class'] .= ' heading--type-action';

                break;
        }

        foreach ($block->getData('attributes', []) as $key => $value) {
            $attributes[$key] = CommonMark\Util\Xml::escape($value, true);
        }

        return new CommonMark\HtmlElement($tag, $attributes, $htmlRenderer->renderInlines($block->children()));
    }
}


function stdout(string $message)
{
    file_put_contents('php://stdout', $message);
}

function stderr(string $message)
{
    file_put_contents('php://stderr', $message);
}

function usage()
{
    stdout(
        'Usage: ' . $_SERVER['argv'][0] . ' [<options>] [<paths>]' . "\n" .
        'Options: ' . "\n" .
        '  -h, --help: This help.' . "\n"
    );
}

function render(Finder $finder)
{
    $environment = CommonMark\Environment::createCommonMarkEnvironment();
    $environment->addBlockRenderer(CommonMark\Block\Element\Heading::class, new HeadingRenderer());

    $configuration = ['html_input' => 'escape'];
    $compiler      = new CommonMark\CommonMarkConverter($configuration, $environment);

    $body = (function () use ($finder, $compiler) {
        foreach ($finder as $file) {
            yield '<section>' . "\n";
            yield $compiler->convertToHtml(file_get_contents($file->getPathname()));
            yield '</section>' . "\n";
        }
    })();

    (function () use ($body) {
        require dirname(__DIR__) . '/res/template/html.php';
    })();
}

if (count($_SERVER['argv']) === 1) {
    usage();

    exit(1);
}

$arguments = array_slice($_SERVER['argv'], 1);
$finder    = new Finder();

foreach ($arguments as $i => $argument) {
    switch ($argument) {
        case '-h':
        case '--help':
            usage();

            exit(1);

        default:
            if (0 !== preg_match('/(--?.+)/', $argument, $match)) {
                stderr('Unrecognized option `' . $match[1] . '`.' . "\n");
            } else {
                $finder->append(new FilesystemIterator($argument));
            }
    }
}

render($finder);
